{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"AzureDatabricks1": {
			"type": "string"
		},
		"AzureDataLakeStorage1": {
			"type": "string"
		},
		"AzureSynapseAnalytics1": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Project1_ForestFire_PL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pysparkTransform",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "VerifySourceFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/keerthanaakkula@gmail.com/LogicTransformation.py",
							"baseParameters": {
								"csvpath": {
									"value": "@pipeline().parameters.inputfilepath",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "[parameters('AzureDatabricks1')]",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Getoutputfile",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "pysparkTransform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "setoutputvariable",
							"value": {
								"value": "@activity('pysparkTransform').output.runOutput",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyToSynapse",
						"description": "This activity will copy the transformed data from adls to synapse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Getoutputfile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@split(split(variables('setoutputvariable'), '@')[1], '/')[1]",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "@split(variables('setoutputvariable'), '/')[sub(length(split(variables('setoutputvariable'), '/')), 1)]\n",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "sinkDataset",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "VerifySourceFile",
						"description": "Verify if the source file is present or not in Azure Data Lake Storage ",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.inputfilepath, pipeline().parameters.inputfilepath)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail1",
									"description": "This fail activity will fail the pipleline if the input file is not present",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "This pipleline as no inputfile",
										"errorCode": "500"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"inputfilepath": {
						"type": "string"
					}
				},
				"variables": {
					"setoutputvariable": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset')]",
				"[concat(variables('factoryId'), '/datasets/sinkDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "destinationcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "final_table"
				}
			},
			"dependsOn": []
		}
	]
}